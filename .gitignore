# Rust build artifacts
/target/
**/*.rs.bk
*.pdb

# Cargo lock file (uncomment if this is a library)
# Cargo.lock

# Generated by Cargo
# will have compiled files and executables
debug/
target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html

# These are backup files generated by rustfmt
**/*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
*.natvis

# IDE/Editor files
.vscode/
.idea/
*.iml
*.swp
*.swo
*~
.DS_Store
Thumbs.db

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Machine Learning specific files
*.onnx
*.pt
*.pth
*.pkl
*.pickle
*.h5
*.hdf5
*.model
*.weights
data/
datasets/
models/
checkpoints/
logs/
runs/
wandb/
mlruns/
.tensorboard/

# Python cache (if using Python tools alongside)
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
ENV/
env.bak/
venv.bak/

# Jupyter Notebook
.ipynb_checkpoints
*.ipynb

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/

# Temporary folders
tmp/
temp/

# Backup files
*.bak
*.backup
*.old

# Compiled Dynamic libraries
*.so
*.dylib
*.dll

# Executables
*.exe
*.out
*.app

# Large files (adjust as needed)
*.zip
*.tar.gz
*.rar

# Profiling data
*.prof

# Flame graphs
flamegraph.svg
perf.data*

# RustRover
.fleet/

# CLion
.idea/

# Generated documentation
doc/

# Test artifacts
/tests/tmp/
